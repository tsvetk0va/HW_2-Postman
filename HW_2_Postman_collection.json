{
	"info": {
		"_postman_id": "48b177d0-61ae-4408-9ae2-d1ba41e9c670",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20722828"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let reqBody = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.age).to.eql(reqBody.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.salary).to.eql(+reqBody.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"// console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"у параметра dog есть параметры name\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.include.name;\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"у параметра dog есть параметры age\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"параметр name имеет значение Luky\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.have.string('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"параметр age имеет значение 4\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.age) == 4;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ksenya&age=77&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ksenya"
						},
						{
							"key": "age",
							"value": "77"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", function () {\r",
							"pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary равен salary из request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3 из request\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req.salary * 3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8 из request\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary * 3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"в параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age равен age из request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(var key in jsonData.person) {\r",
							"   if(typeof(jsonData.person[key]) == 'object'){\r",
							"       for(let i = 0; i < Object.keys(jsonData.person[key]).length; i++){\r",
							"           console.log(jsonData.person[key][i]);\r",
							"       }\r",
							"   }\r",
							"   else if(typeof(jsonData.person[key]) != 'object') {\r",
							"        console.log(jsonData.person[key]);\r",
							"   }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/first",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let name_resp = jsonData.name\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {\r",
							"        pm.expect(name_resp).to.eql(\"Nexta\");\r",
							"});\r",
							"// console.log(name_resp)\r",
							"\r",
							"let age_resp = jsonData.age\r",
							"let salary_resp = jsonData.salary\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {\r",
							"        pm.expect(age_resp).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function () {\r",
							"        pm.expect(salary_resp).to.eql(2000);\r",
							"});\r",
							"\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
							"        pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
							"        pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", function () {\r",
							"        pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+req.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nexta",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let reqBody = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name в ответе равно name s request (name забрать из request.)\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age в ответе равно age из request\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.age).to.eql(+reqBody.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(reqBody.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", function () {\r",
							"  \r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqBody.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент параметра salary равен salary*2 из request\", function () {\r",
							"  \r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqBody.salary * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"2-й элемент параметра salary равен salary*3 из request\", function () {\r",
							"  \r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqBody.salary * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Ksenya\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"77\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"1000000\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for(let i = 0; i < jsonData.length; i++){\r",
							"    console.log(jsonData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ksenya&age=77&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ksenya"
						},
						{
							"key": "age",
							"value": "77"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		}
	]
}